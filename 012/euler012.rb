# ProjectEuler.net Problem 012
# As solved by Manuel Franco <mafraba@gmail.com>
#
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
# 

require 'prime'
require 'benchmark'

puts ""
puts "ProjectEuler Problem 12"
puts ""

i=0
t=0
ans = nil

time = Benchmark.realtime do 
  while not ans
    i = i + 1
    t = t + i
    # We'll search divisors up to its root square
    q = (t**0.5).floor
    divisors = (1...q).select { |e| t % e == 0  }
    # We can safely assume the real number of divisors exactly doubles the size of the found ones,
    # since we could divide 't' by each of them and obtain a new divisor. 
    # The only exception is if the square root is an integer, in which case it'd be out of the 
    # selecion and we should add +1
    n_divisors = divisors.size * 2
    n_divisors += 1 if q.integer?
    ans = [ t , *divisors ] if n_divisors > 500
    #puts t
  end
end

puts ""
puts "Solution found: #{ans[0]}" if ans
puts "No solution found" if not ans
puts "Time elapsed: #{time*1000} ms"
